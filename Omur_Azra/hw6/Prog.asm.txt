import sys

symbols = {
    "SP": 0, "LCL": 1, "ARG": 2, "THIS": 3, "THAT": 4,
    "R0": 0, "R1": 1, "R2": 2, "R3": 3, "R4": 4,
    "R5": 5, "R6": 6, "R7": 7, "R8": 8, "R9": 9,
    "R10": 10, "R11": 11, "R12": 12, "R13": 13,
    "R14": 14, "R15": 15, "SCREEN": 16384, "KBD": 24576
}

comp_table = {
    # a = 0
    "0": "0101010", "1": "0111111", "-1": "0111010",
    "D": "0001100", "A": "0110000", "!D": "0001101",
    "!A": "0110001", "-D": "0001111", "-A": "0110011",
    "D+1": "0011111", "A+1": "0110111", "D-1": "0001110",
    "A-1": "0110010", "D+A": "0000010", "D-A": "0010011",
    "A-D": "0000111", "D&A": "0000000", "D|A": "0010101",
    # a = 1
    "M": "1110000", "!M": "1110001", "-M": "1110011",
    "M+1": "1110111", "M-1": "1110010", "D+M": "1000010",
    "D-M": "1010011", "M-D": "1000111", "D&M": "1000000",
    "D|M": "1010101"
}

dest_table = {
    "": "000", "M": "001", "D": "010", "MD": "011",
    "A": "100", "AM": "101", "AD": "110", "AMD": "111"
}

jump_table = {
    "": "000", "JGT": "001", "JEQ": "010", "JGE": "011",
    "JLT": "100", "JNE": "101", "JLE": "110", "JMP": "111"
}

def parse_line(line):
    return line.split("//")[0].strip()

def to_binary(n):
    return format(n, '016b')

def assemble(lines):
    rom_addr = 0
    for line in lines:
        line = parse_line(line)
        if line.startswith("(") and line.endswith(")"):
            label = line[1:-1]
            symbols[label] = rom_addr
        elif line:
            rom_addr += 1

    output = []
    var_addr = 16
    for line in lines:
        line = parse_line(line)
        if not line or line.startswith("("):
            continue
        if line.startswith("@"):
            symbol = line[1:]
            if symbol.isdigit():
                addr = int(symbol)
            else:
                if symbol not in symbols:
                    symbols[symbol] = var_addr
                    var_addr += 1
                addr = symbols[symbol]
            output.append(to_binary(addr))
        else:
            if "=" in line:
                dest, comp_jump = line.split("=")
            else:
                dest, comp_jump = "", line
            if ";" in comp_jump:
                comp, jump = comp_jump.split(";")
            else:
                comp, jump = comp_jump, ""
            output.append("111" + comp_table[comp] + dest_table[dest] + jump_table[jump])
    return output

if __name__ == "__main__":
    asm_file = sys.argv[1]
    with open(asm_file, 'r') as f:
        lines = f.readlines()
    binary = assemble(lines)
    with open(asm_file.replace(".asm", ".hack"), 'w') as f:
        f.write("\n".join(binary))