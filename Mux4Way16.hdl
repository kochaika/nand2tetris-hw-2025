/**
 * 4-way 16-bit multiplexor:
 * out = a if sel = 00
 *       b if sel = 01
 *       c if sel = 10
 *       d if sel = 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // I used Mux directly because it would be too lenghty to implement every Mux as Nand
    Mux(a=a[0],  b=b[0],  sel=sel[0], out=t0);
    Mux(a=a[1],  b=b[1],  sel=sel[0], out=t1);
    Mux(a=a[2],  b=b[2],  sel=sel[0], out=t2);
    Mux(a=a[3],  b=b[3],  sel=sel[0], out=t3);
    Mux(a=a[4],  b=b[4],  sel=sel[0], out=t4);
    Mux(a=a[5],  b=b[5],  sel=sel[0], out=t5);
    Mux(a=a[6],  b=b[6],  sel=sel[0], out=t6);
    Mux(a=a[7],  b=b[7],  sel=sel[0], out=t7);
    Mux(a=a[8],  b=b[8],  sel=sel[0], out=t8);
    Mux(a=a[9],  b=b[9],  sel=sel[0], out=t9);
    Mux(a=a[10], b=b[10], sel=sel[0], out=t10);
    Mux(a=a[11], b=b[11], sel=sel[0], out=t11);
    Mux(a=a[12], b=b[12], sel=sel[0], out=t12);
    Mux(a=a[13], b=b[13], sel=sel[0], out=t13);
    Mux(a=a[14], b=b[14], sel=sel[0], out=t14);
    Mux(a=a[15], b=b[15], sel=sel[0], out=t15);

    Mux(a=t0,  b=t0,  sel=sel[1], out=out[0]);
    Mux(a=t1,  b=t1,  sel=sel[1], out=out[1]);
    Mux(a=t2,  b=t2,  sel=sel[1], out=out[2]);
    Mux(a=t3,  b=t3,  sel=sel[1], out=out[3]);
    Mux(a=t4,  b=t4,  sel=sel[1], out=out[4]);
    Mux(a=t5,  b=t5,  sel=sel[1], out=out[5]);
    Mux(a=t6,  b=t6,  sel=sel[1], out=out[6]);
    Mux(a=t7,  b=t7,  sel=sel[1], out=out[7]);
    Mux(a=t8,  b=t8,  sel=sel[1], out=out[8]);
    Mux(a=t9,  b=t9,  sel=sel[1], out=out[9]);
    Mux(a=t10, b=t10, sel=sel[1], out=out[10]);
    Mux(a=t11, b=t11, sel=sel[1], out=out[11]);
    Mux(a=t12, b=t12, sel=sel[1], out=out[12]);
    Mux(a=t13, b=t13, sel=sel[1], out=out[13]);
    Mux(a=t14, b=t14, sel=sel[1], out=out[14]);
    Mux(a=t15, b=t15, sel=sel[1], out=out[15]);
}
