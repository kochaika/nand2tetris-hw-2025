// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl

CHIP CPU {
    IN  inM[16], instruction[16], reset;
    OUT outM[16], writeM, addressM[15], pc[15];

    PARTS:
    Not(in=instruction[15], out=isAInstr);
    Not(in=isAInstr, out=isCInstr);

    And(a=isCInstr, b=instruction[5], out=loadA);
    And(a=isCInstr, b=instruction[4], out=loadD);
    And(a=isCInstr, b=instruction[3], out=writeM);

    Mux16(a=instruction, b=aluOut, sel=isCInstr, out=aIn);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    DRegister(in=aluOut, load=loadD, out=dOut);

    Mux16(a=aOut, b=inM, sel=instruction[12], out=y);

    ALU(x=dOut, y=y,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=aluOut, zr=zr, ng=ng);

    // Fully connect ALU output to outM[0..15]
    Or16(a=aluOut, b=false, out=outM);

    // Jump logic
    And(a=instruction[0], b=zr, out=jEq);
    And(a=instruction[1], b=ng, out=jLt);
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=instruction[2], b=notZr, out=jGt);
    Or(a=jEq, b=jLt, out=cond1);
    Or(a=cond1, b=jGt, out=jump);
    And(a=isCInstr, b=jump, out=pcLoad);
    Not(in=pcLoad, out=pcInc);

    PC(in=aOut, load=pcLoad, inc=pcInc, reset=reset, out=pc);
}
