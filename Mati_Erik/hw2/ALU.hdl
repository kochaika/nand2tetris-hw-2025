// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Mux16(a= true, b= false, sel= zx, out= zerox);
    And16(a= zerox, b= x, out= zxdone);
    Mux16(a= false, b= true, sel= nx, out= negatex);
    Xor16(a= zxdone, b= negatex, out= nxdone);
    //Inc16(in= nxinter, out= nxinc);
    //Mux16(a= nxinter, b= nxinc, sel= nx, out= nxdone);

    Mux16(a= true, b= false, sel= zy, out= zeroy);
    And16(a= zeroy, b= y, out= zydone);
    Mux16(a= false, b= true, sel= ny, out= negatey);
    Xor16(a= zydone, b= negatey, out= nydone);
    //Inc16(in= nyinter, out= nyinc);
    //Mux16(a= nyinter, b= nyinc, sel= nx, out= nydone);

    Add16(a = nxdone, b = nydone, out = added);
    And16(a= nxdone, b= nydone, out= anded);
    Mux16(a= anded, b= added, sel= f, out= functionresult);
    Mux16(a= false, b= true, sel= no, out= negate);
    Xor16(a= functionresult, b= negate, out= out);
    Xor16(a= functionresult, b= negate, out[15]= ng);
    Xor16(a= functionresult, b= negate, out[0]= tempout1, out[1] = tempout2, out[2]= tempout3, out[3] = tempout4, out[4]= tempout5, out[5] = tempout6, out[6]= tempout7, out[7] = tempout8, out[8]= tempout9, out[9] = tempout10, out[10]= tempout11, out[11] = tempout12, out[12]= tempout13, out[13] = tempout14, out[14]= tempout15, out[15] = tempout16);
    Or(a= tempout1, b= tempout2, out= i1);
    Or(a= i1, b= tempout3, out= i2);
    Or(a= i2, b= tempout4, out= i3);
    Or(a= i3, b= tempout5, out= i4);
    Or(a= i4, b= tempout6, out= i5);
    Or(a= i5, b= tempout7, out= i6);
    Or(a= i6, b= tempout8, out= i7);
    Or(a= i7, b= tempout9, out= i8);
    Or(a= i8, b= tempout10, out= i9);
    Or(a= i9, b= tempout11, out= i10);
    Or(a= i10, b= tempout12, out= i11);
    Or(a= i11, b= tempout13, out= i12);
    Or(a= i12, b= tempout14, out= i13);
    Or(a= i13, b= tempout15, out= i14);
    Or(a= i14, b= tempout16, out= i15);
    Not(in= i15, out= zr);

    
    
}