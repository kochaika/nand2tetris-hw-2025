// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];
    //this is a 512-register memory with 16-bit data.
    //this memory is broken down into 64 blocks of 8 registers each
    //there are 512 total registers
    PARTS:
    DMux8Way(in=load , sel=address[6..8] , a=a , b=b , c=c , d=d , e=e , f=f , g=g , h=h );
    //this is responsible for splitting the load signal into 8 outputs, one for
    //each block of 64 registers. The address[6..8] selects which block should receive the load signal


    RAM64(in=in , load=a , address=address[0..5] , out=oa );
    RAM64(in=in , load=b , address=address[0..5] , out=ob);
    RAM64(in=in , load=c , address=address[0..5] , out=oc);
    RAM64(in=in , load=d , address=address[0..5] , out=od);
    RAM64(in=in , load=e , address=address[0..5] , out=oe);
    RAM64(in=in , load=f , address=address[0..5] , out=of);
    RAM64(in=in , load=g , address=address[0..5] , out=og);
    RAM64(in=in , load=h , address=address[0..5] , out=oh);

    //each of the above blocks is RAM64, which handles 64 registers.
    //it is similar with what we did with RAM64 before, but now we have 8 such blocks
    // to make up the full RAM512
    Mux8Way16(a=oa , b=ob , c=oc , d=od , e=oe , f=of , g=og , h=oh, sel=address[6..8] , out=out );
    //once the data is loaded into one of the 8 blocks, the Mux8Way16 selects which
    //block s data should be the output. The address[6..8] selects the block, and it passes the value
    //from the correct block to the output

}