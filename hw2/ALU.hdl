// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

// ALU Implementation in nand2tetris
CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
    // Zero the inputs based on zx and zy
    Mux(a=x, b=false, sel=zx, out=zxResult);
    Not(in=zxResult, out=zxNot);
    Mux(a=zxNot, b=zxResult, sel=nx, out=xFinal);
    
    Mux(a=y, b=false, sel=zy, out=zyResult);
    Not(in=zyResult, out=zyNot);
    Mux(a=zyNot, b=zyResult, sel=ny, out=yFinal);
    
    // Perform the operation based on f
    Add16(a=xFinal, b=yFinal, out=addResult);
    And16(a=xFinal, b=yFinal, out=andResult);
    Or16(a=xFinal, b=yFinal, out=orResult);
    Xor16(a=xFinal, b=yFinal, out=xorResult);
    
    Mux(a=addResult, b=andResult, sel=f, out=operationResult);
    Mux(a=operationResult, b=orResult, sel=f, out=operationResult);
    Mux(a=operationResult, b=xorResult, sel=f, out=operationResult);
    
    // Set output based on no
    Not(in=operationResult, out=finalResult);
    Mux(a=finalResult, b=operationResult, sel=no, out=out);
    
    // Set flags
    Or16(a=out, b=out, out=zrResult);  // zr = 1 if result is zero
    Not(in=zrResult, out=zr); // Zero flag

    And(a=out[15], b=out[15], out=ng);  // ng = 1 if result is negative
}