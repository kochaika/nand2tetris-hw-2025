CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=x1);
    Mux16(a=y, b=false, sel=zy, out=y1);

    Not16(in=x1, out=nx1);
    Mux16(a=x1, b=nx1, sel=nx, out=x2);
    Not16(in=y1, out=ny1);
    Mux16(a=y1, b=ny1, sel=ny, out=y2);

    And16(a=x2, b=y2, out=aAndB);
    Add16(a=x2, b=y2, out=aPlusB);
    Mux16(a=aAndB, b=aPlusB, sel=f, out=out0);
    Not16(in=out0, out=nout0);
    Mux16(a=out0, b=nout0, sel=no, out=out,out=outflag,out[0..7]=outflag1,out[8..15]=outflag2,out[15]=ng);

    Or8Way(in=outflag1, out=o1);
    Or8Way(in=outflag2, out=o2);
    Or(a=o1, b=o2, out=o3);
    Not(in=o3, out=zr);
}