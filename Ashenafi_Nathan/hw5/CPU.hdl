// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1,
						   out[3]=d3, out[4]=d2, out[5]=d1,
						   out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1,
						   out[12]=ia, out[15]=aorc, out[0..14]=addressa);
	DMux(in=true, sel=aorc, a=ainst, b=cinst);

    And(a=cinst, b=d1, out=computetoa);
    Mux16(a=instruction, b=alu, sel=computetoa, out=newa);
    Or(a=ainst, b=computetoa, out=loada);
    ARegister(in=newa, load=loada, out=aRegister);

    And(a=d2, b=cinst, out=loadd);
    DRegister(in=alu, load=loadd, out=dRegister);

    Mux16(a=aRegister, b=inM, sel=ia, out=aorm);
    ALU(x=dRegister, y=aorm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu, zr=zr, ng=ng);

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=j1, b=ng, out=jlt);
    And(a=j2, b=zr, out=jeq);
    And(a=j3, b=pos, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    And(a=cinst, b=jmp, out=shouldjmp);

    And16(a=alu, b=true, out=outM);

    And16(a=aRegister, b=true, out[0..14]=addressM);

    And(a=d3, b=cinst, out=writeM);

    PC(in=aRegister, load=shouldjmp, inc=true, reset=reset, out[0..14]=pc);
}