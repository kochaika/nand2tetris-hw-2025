// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a= x[0..15], b=false, sel=zx, out=zxout);
    Not16(in=zxout, out=notzx);
    Mux16(a=zxout, b=notzx, sel=nx, out=outx);
    Mux16(a= y[0..15], b=false, sel=zy, out=zyout);
    Not16(in=zyout, out=notzy);
    Mux16(a=zyout, b=notzy, sel=ny, out=outy);
    And16(a=outx, b=outy, out=outxandy);
    Add16(a = outx, b = outy, out = outxplusy);
    Mux16(a=outxandy, b=outxplusy, sel=f , out=outxy);
    Not16(in=outxy, out=notoutxy);
    Mux16(a=outxy, b=notoutxy, sel=no, out[0..7]=outfirst, out[8..14]=outsecond, out[15]=outsign);
    Mux16(a[0..7]=outfirst, a[8..14]=outsecond, a[15]=outsign, b=true, sel=false, out=out);

    Or8Way(in=outfirst, out=firstor);
    Or8Way(in[0..6]=outsecond, in[7]=outsign, out=secondor);
    Or(a=firstor, b=secondor, out=zrreverse);
    Not(in=zrreverse, out=zr);

    Or(a=outsign, b=false, out=ng);    
}