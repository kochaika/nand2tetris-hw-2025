// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not(in=zx, out=zxhat);
    And16(a=x, b[0]=zxhat, b[1]=zxhat, b[2]=zxhat, b[3]=zxhat, 
               b[4]=zxhat, b[5]=zxhat, b[6]=zxhat, b[7]=zxhat, 
               b[8]=zxhat, b[9]=zxhat, b[10]=zxhat, b[11]=zxhat, 
               b[12]=zxhat, b[13]=zxhat, b[14]=zxhat, b[15]=zxhat, out=x1);
    Xor16(a=x1, b[0]=nx, b[1]=nx, b[2]=nx, b[3]=nx, 
                b[4]=nx, b[5]=nx, b[6]=nx, b[7]=nx, 
                b[8]=nx, b[9]=nx, b[10]=nx, b[11]=nx, 
                b[12]=nx, b[13]=nx, b[14]=nx, b[15]=nx, out=x2);


    Not(in=zy, out=zyhat);
    And16(a=y, b[0]=zyhat, b[1]=zyhat, b[2]=zyhat, b[3]=zyhat, 
               b[4]=zyhat, b[5]=zyhat, b[6]=zyhat, b[7]=zyhat, 
               b[8]=zyhat, b[9]=zyhat, b[10]=zyhat, b[11]=zyhat, 
               b[12]=zyhat, b[13]=zyhat, b[14]=zyhat, b[15]=zyhat, out=y1);
    Xor16(a=y1, b[0]=ny, b[1]=ny, b[2]=ny, b[3]=ny, 
                b[4]=ny, b[5]=ny, b[6]=ny, b[7]=ny, 
                b[8]=ny, b[9]=ny, b[10]=ny, b[11]=ny, 
                b[12]=ny, b[13]=ny, b[14]=ny, b[15]=ny, out=y2);

    Add16(a=x2, b=y2, out=res1);
    And16(a=x2, b=y2, out=res2);
    Mux16(a=res2, b=res1, sel=f, out=res3);
    Not16(in=res3, out=res3hat);
    Mux16(a=res3, b=res3hat, sel=no, out[0..7]=res4, out[8..15]=res5);

    Or8Way(in=res4, out=or1);
    Or8Way(in=res5, out=or2);
    Or(a=or1, b=or2, out=or);
    Not(in=or, out=zr);

    Mux16(a=res3, b=res3hat, sel=no, out=res6);

    And16(a[0..15]=true,b=res6,out[15]=ng);

    Mux16(a=res3, b=res3hat, sel=no, out=out);
}