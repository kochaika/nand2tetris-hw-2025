// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    PC(in=outa, load=jump, inc=true, reset=reset, out[0..14]=pc);

    And(a=instruction[15], b=true, out=cinst);
    And(a=instruction[12], b=cinst, out=minst);
    Not(in=cinst, out=ainst);

    And(a=instruction[5], b=cinst, out=storea);
    And(a=instruction[4], b=cinst, out=stored);
    And(a=instruction[3], b=cinst, out=storem, out=writeM);

    And(a=instruction[2], b=cinst, out=instjmplt);
    And(a=instruction[1], b=cinst, out=instjmpeq);
    And(a=instruction[0], b=cinst, out=instjmpgt);

    DRegister(in=outalu, load=stored, out=outd);

    Or(a=ainst, b=storea, out=loada);
    Mux16(a=instruction, b=outalu, sel=storea, out=ina);
    ARegister(in=ina, load=loada, out=outa, out[0..14]=addressM);

    Mux16(a=outa, b=inM, sel=minst, out=outaorm);

    ALU(x=outd, y=outaorm, zx=instruction[11], nx=instruction[10],
           zy=instruction[9], ny=instruction[8], f=instruction[7],
           no=instruction[6], zr=aluzr, ng=alung, out=outM, out=outalu);

    Not(in=alung, out=notalung);
    Not(in=aluzr, out=notaluzr);
    And(a=notalung, b=notaluzr, out=alupv);
    And(a=instjmplt, b=alung, out=jumplt);
    And(a=instjmpeq, b=aluzr, out=jumpeq);
    And(a=instjmpgt, b=alupv, out=jumpgt);
    Or8Way(in[0]=jumplt, in[1]=jumpeq, in[2]=jumpgt, in[3..7]=false, out=jump);
}